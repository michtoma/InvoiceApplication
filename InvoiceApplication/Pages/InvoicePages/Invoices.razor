@page "/invoices"
@using InvoiceApplication.Services.Pdf;
@inject IInvoiceService _invoiceService
@inject IPdfService _pdfService
@inject NavigationManager _navigationManager

<PageTitle>Invoice List</PageTitle>
<AuthorizeView>
    <ChildContent Context="gridContext">
        <div class="container-fluid">
            <h3>Invoice List</h3>
            <a class="btn btn-outline-secondary" href="invoiceAction">Add New</a>
            @if (_invoices is null)
            {
                <p>Loading ...</p>

            }
            else if (_invoices.Count() == 0)
            {
                <p>It's look like is nothing here, create a new invoioce</p>
            }
            else
            {
                <div class="page-size-chooser">
                    Items per page:
                    <select class="btn btn-secondary" @bind="@paginationState.ItemsPerPage">
                        <option>5</option>
                        <option>10</option>
                        <option>20</option>
                        <option>50</option>
                    </select>
                </div>

                <div class="table-responsive">
                    <QuickGrid Items="filteredInvoices" Pagination="paginationState" ResizableColumns="true" Class="table table-responsive table-secondary table-striped table-bordered">
                        <PropertyColumn Property="@(i=>i.Number)" Sortable="true">
                        </PropertyColumn>
                        <PropertyColumn Property="@(i=>i.Buyer.Nip)" Sortable="true"></PropertyColumn>
                        <PropertyColumn Property="@(i => i.Buyer.Name)" Sortable="true">
                            <ColumnOptions>
                                <i class="bi bi-search"></i>
                                <input type="serch" class="serch" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Search" />
                            </ColumnOptions>
                        </PropertyColumn>

                        <PropertyColumn Property="@(i=>i.CreateDate)" Format="dd-MM-yyyy" Title="Create date" Sortable="true"></PropertyColumn>
                        <PropertyColumn Property="@(i=>i.TotaNetlValue)" Format="0.00 zł" Sortable="true">
                            <ColumnOptions>
                                <p>Min: <input type="number" @bind="minValue" @bind:event="oninput" min="0" max="9999" /> <span class="inline-block w-10"></span></p>
                                <p>Min: <input type="range" @bind="minValue" @bind:event="oninput" min="0" max="9999" /> <span class="inline-block w-10"></span></p>
                                <p>Max: <input type="number" @bind="maxValue" @bind:event="oninput" min="0" max="99999" /> <span class="inline-block w-10"></span></p>
                                <p>Max: <input type="range" @bind="maxValue" @bind:event="oninput" min="0" max="99999" /> <span class="inline-block w-10"></span></p>
                            </ColumnOptions>
                        </PropertyColumn>
                        <PropertyColumn Property="@(i=>i.IsPaid)" Sortable="true" Title="Is Paid"></PropertyColumn>
                        <PropertyColumn Property="@(i=>i.IsOverdue)" Sortable="true" Title="Is Overdue"></PropertyColumn>
                        <TemplateColumn Title="Action Buttons">
                            <button class="btn btn-outline-danger btn-sm me-1" @onclick="()=> ShowInvoiceDetails(context.Id)">View</button>
                            @if (context.IsEditable)
                            {
                                <button class="btn btn-outline-secondary btn-sm" @onclick="()=> EditHeader(context.Id)">Edit</button>
                                <button class="btn btn-outline-warning btn-sm" @onclick="()=> FinalizeInvoice(context)">Finalize</button>
                            }
                            else
                            {
                                <button class="btn btn-outline-primary btn-sm" @onclick="()=>Print(context)">Print</button>
                                <button class="btn btn-outline-success btn-sm">Send by Email </button>
                                if (!context.IsPaid)
                                {
                                    <button class="btn btn-warning btn-sm ms-1" @onclick="()=> SetAsPaid(context)">Mark as Paid </button>
                                }

                            }
                        </TemplateColumn>
                    </QuickGrid>


                    <Paginator Value="paginationState" />
                </div>
            }
        </div>
    </ChildContent>
</AuthorizeView>

@code {
    string nameFilter;
    bool isVisible = false;
    private IQueryable<Invoice>? _invoices;
    PaginationState paginationState = new PaginationState { ItemsPerPage = 5 };
    int minValue;
    int maxValue = 999999999;
    IQueryable<Invoice> filteredInvoices
    {
        get
        {
            var result = _invoices.Where(i => i.TotaNetlValue <= maxValue);

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(i => i.Buyer.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            if (minValue > 0)
            {
                result = result.Where(i => i.TotaNetlValue >= minValue);
            }

            return result;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        _invoices = (await _invoiceService.GetUSerInvoicesAsync()).AsQueryable();
    }
    private void EditHeader(int invoiceId)
    {
        _navigationManager.NavigateTo($"invoiceAction/{invoiceId}");
    }
    private void ShowInvoiceDetails(int invoiceId)
    {
        _navigationManager.NavigateTo($"invoice/{invoiceId}");
    }
    private async Task DeleteInvoice(int invoiceId)
    {
        var invoiceToDelete = await _invoiceService.GetInvoiceByIdAsync(invoiceId);
        await _invoiceService.DeleteInvoiceAsync(invoiceToDelete);
        _invoices = (await _invoiceService.GetUSerInvoicesAsync()).AsQueryable();
        StateHasChanged();
    }
    private async Task FinalizeInvoice(Invoice invoice)
    {
        await _invoiceService.FinalizeInvoice(invoice);
        StateHasChanged();
    }
    private async Task SetAsPaid(Invoice invoice)
    {
        invoice.IsPaid = true;
        await _invoiceService.UpdateInvoiceAsync(invoice);
        StateHasChanged();
    }
    private async Task Print(Invoice invoice)
    {
        _navigationManager.NavigateTo($"/pdf/invoice/{invoice.Id}");
    }
}
