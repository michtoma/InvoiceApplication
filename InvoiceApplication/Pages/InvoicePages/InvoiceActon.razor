@page "/invoiceAction"
@page "/invoiceAction/{invoiceId:int?}"
@inject IInvoiceService _invoiceService
@inject IItemService _itemService
@inject IInvoiceItemService _invItemService
@inject IBuyerService _buyerService
@inject ISellerService _sellerService
@inject IAddresService _addressService
@inject IAppUserService _userService
@inject INumberGenerator _numberGenerator
<PageTitle>@((invoiceId == null || invoiceId == 0) ? "Add New Invoice" : "Update Invoice")</PageTitle>
    <ModalWindow modalMessage="modalModelMessage" onCancel="onCancel" onConfirm="onConfirm" forDelete="toDelete"></ModalWindow>
    <ModalItemList isVisible="isVisibleItemsModal" items="items" OnCLickClose="CloseItemsModal" OnCLickAdd="AddItemFromModalItems"></ModalItemList>
    <ModalItemsInvoiceEdit @ref="modalInvItemEdit" OnClickClose="CloseEditInvoiceItem"></ModalItemsInvoiceEdit>
    <h3>@((invoiceId == null || invoiceId == 0) ? "Add New Invoice" : "Update Invoice")</h3>
<EditForm Model="invoice" OnValidSubmit="HeaderConirmation">
    <DataAnnotationsValidator />
    <div class="row mb-3">
        <div class="col-md-6">
            <label for="buyer" class="form-label">Buyer</label>
            <InputSelect id="buyer" class="form-select" ValueExpression="@(()=>invoice.BuyerId)" Value="@invoice.BuyerId" ValueChanged="@((int? args) => { invoice.BuyerId = args; AddressSet(args); })" required>
                <option value="" selected disabled>Select Company</option>
                @foreach (var buyer in buyers)
                {
                    <option value="@buyer.Id">@buyer.Name @buyer.Nip</option>
                }
            </InputSelect>
            @if (buyerAddress is not null)
            {
                <div class="mt-2">
                    <label class="fw-bold">Buyer Address:</label>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="street" class="form-label">Street:</label>
                            <input type="text" id="street" name="street" value="@buyerAddress.Street" class="form-control" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="streetNumber" class="form-label">Street Number:</label>
                            <input type="text" id="streetNumber" name="streetNumber" value="@buyerAddress.StreetNumber" class="form-control" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="apartmentNumber" class="form-label">Apartment Number:</label>
                            <input type="text" id="apartmentNumber" name="apartmentNumber" value="@buyerAddress.ApartmentNumber" class="form-control" disabled>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <label for="postalCode" class="form-label">Postal Code:</label>
                            <input type="text" id="postalCode" name="postalCode" value="@buyerAddress.PostalCode" class="form-control" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="city" class="form-label">City:</label>
                            <input type="text" id="city" name="city" value="@buyerAddress.City" class="form-control" disabled>
                        </div>
                        <div class="col-md-4">
                            <label for="country" class="form-label">Country:</label>
                            <input type="text" id="country" name="country" value="@buyerAddress.Country" class="form-control" disabled>
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="col-md-3">
            <label for="number" class="form-label">Number</label>
            <InputText id="number" @bind-Value="invoice.Number" class="form-control" disabled></InputText>
            <ValidationMessage For="@(() => invoice.Number)" />
        </div>
        <div class="col-md-3">
            <label for="createDate" class="form-label">Create Date</label>
            <InputDate id="createDate" @bind-Value="invoice.CreateDate" class="form-control" disabled></InputDate>
            <ValidationMessage For=@(()=>invoice.CreateDate) />
        </div>
        <div class="mb-3">
            <label class="fw-bold">Payment Information:</label>
            <div>
                <label>Number of days of payment deadline: </label>
                <InputNumber id="days" @bind-Value="invoice.DaysOfPaiment"></InputNumber>
                <label>Payment deadline: @DateOnly.FromDateTime(invoice.PaymentDate)</label>
            </div>
            <label for="description" class="form-label">Description</label>
            <InputText id="description" @bind-Value="invoice.Description" class="form-control"></InputText>
            <ValidationMessage For=@(()=>invoice.Description) />
        </div>
    </div>
    <button class="btn btn-success my-2" type="submit">@((invoiceId == null || invoiceId == 0) ? "Save Invoice" : "Update Invoice Header")</button>
</EditForm>

<div class="mt-4">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>No</th>
                <th>Item Name</th>
                <th>Unit</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Total Net Value</th>
                <th>VAT Rate</th>
                <th>Total Gross Value</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @if (invoice.InvoiceItems != null)
            {
                @foreach (var (item, index) in invoice.InvoiceItems.Select((item, index) => (item, index)))
                {
                    <tr>
                        <td>@(index + 1)</td>
                        <td>
                            @item.Item.Name
                            @if (item.Description !="")
                            {
                                <br />
                                <textarea readonly class="form-control">@item.Description</textarea>
                            }
                        </td>
                        <td>@item.Item.UnitOfMeasure.ShortName</td>
                        <td>@item.NetPrice.ToString("0.00")</td>
                        <td>@item.Quantity</td>
                        <td>@item.TotalNetValue.ToString("0.00")</td>
                        <td>@item.VatRate</td>
                        <td>@item.TotalGrossValue.ToString("0.00")</td>
                        <td>
                            <button class="btn btn-dark" @onclick="(i=> EditInvoiceItem(item.Id))">Edit</button>
                            <button class="btn btn-danger ms-2" @onclick="(i=> DeleteInvoiceItem(item.Id))">Delete</button>
                        </td>
                    </tr>
                }
            }
            <tr>
                <td colspan="4"></td>
                <th>Total:</th>
                <td>@invoice.InvoiceItems.Sum(i => i.TotalNetValue).ToString("0.00")</td>
                <td>XXX</td>
                <td>@invoice.InvoiceItems.Sum(i => i.TotalGrossValue).ToString("0.00")</td>
                <td></td>
            </tr>
        </tbody>
    </table>
</div>

<div class="mt-2">
    @if (!(invoiceId == null || invoiceId == 0))
    {
        <button class="btn btn-outline-secondary me-2" @onclick="showItemsModal">Add Item to Invoice </button>
    }
    <a class="btn btn-secondary my-2" href=" Invoices">Back to Invoice List </a>
</div>

@code {
    bool modalConfirmed = false;
    bool toDelete = false;
    [Parameter]
    public int? invoiceId { get; set; }
    ModalMessage modalModelMessage = new();
    Invoice invoice = new();
    Buyer buyer = new();
    List<Item> items = new();
    List<Buyer> buyers = new();
    Address buyerAddress = new();
    ModalItemsInvoiceEdit modalInvItemEdit;
    bool isVisibleItemsModal = false;
    protected override async Task OnInitializedAsync()
    {
        items = await _itemService.GetUSerItemsAsync();
        buyers = await _buyerService.GetUserBuyersAsync();
        if (!(invoiceId == 0 || invoiceId == null))
        {
            invoice = await _invoiceService.GetInvoiceByIdAsync((int)invoiceId);
            buyer = await _buyerService.GetBuyerByIdAsync((int)invoice.BuyerId);
            buyerAddress = await _addressService.GetAddressByIdAsync(buyer.Address.Id);
        }
        else
        {
            invoice.Number = await _numberGenerator.GenerateInvoiceNumber(invoice.CreateDate);
        }
    }
    async void AddressSet(int? i)
    {
        buyerAddress = new();
        if (invoice.BuyerId is not null) buyer = await _buyerService.GetBuyerByIdAsync((int)invoice.BuyerId);
        if (invoice.BuyerId is not null) buyerAddress = await _addressService.GetAddressByIdAsync(buyer.Address.Id);
        StateHasChanged();
    }
    void HeaderConirmation()
    {
        if (invoiceId == null || invoiceId == 0)
        {
            modalModelMessage.Body = "Are you sure to add a new invoice " + invoice.Number;
            modalModelMessage.Title = "Confirm:";

        }
        else
        {
            modalModelMessage.Body = "Are you sure you want to modify the invoice header " + invoice.Number;
            modalModelMessage.Title = "Confirm:";

        }
        modalModelMessage.Type = ModalType.Confirm;
        modalModelMessage.isVisible = true;

    }
    void ConfirmInvoice()
    {
        modalModelMessage.Body = "Are you sure to add the item to the invoice " + invoice.Number + "?";
        modalModelMessage.Title = "Confirm:";
        modalModelMessage.Type = ModalType.Confirm;
        modalModelMessage.isVisible = true;

    }
    private async void onConfirm(MouseEventArgs e)
    {
        modalConfirmed = true;
        if (modalModelMessage.idToDelte != null)
        {
            DeleteInvoiceItemConfirmed();

        }
        else if (await _invoiceService.InvoiceExist(invoice.Id))
        {
            await _invoiceService.UpdateInvoiceAsync(invoice);
            modalModelMessage.Type = ModalType.Success;
            modalModelMessage.Title = "Succes";
            modalModelMessage.Body = "Saved";
            modalModelMessage.isVisible = true;
        }
        else
        {
            var user = await _userService.GetCurrentUser();
            invoice.AppUserId = user.Id;
            invoice.SellerId = user.Seller.Id;
            invoice.SellerAddressId = user.Seller.AddressId;
            await _invoiceService.AddInvoiceAsync(invoice);
            invoiceId = invoice.Id;
            modalModelMessage.Type = ModalType.Success;
            modalModelMessage.Title = "Succes";
            modalModelMessage.Body = "Saved";
            modalModelMessage.isVisible = true;
        }
        StateHasChanged();


    }
    private async void AddItemFromModalItems(int ItemId)
    {
        InvoiceItems invoiceItem = new();
        var selectedItem = items.FirstOrDefault(i => i.Id == ItemId);
        invoiceItem.ItemId = selectedItem.Id;
        invoiceItem.VatRate = selectedItem.VatRate.Rate;
        invoiceItem.InvoiceId = invoice.Id;
        await _invItemService.AddInvoiceItemAsync(invoiceItem);
        isVisibleItemsModal = false;
        modalModelMessage.Type = ModalType.Success;
        modalModelMessage.Title = "Success";
        modalModelMessage.Body = "The item has been successfully added to the invoice";
        modalModelMessage.isVisible = true;
        StateHasChanged();
        await OnInitializedAsync();
    }
    private async void EditInvoiceItem(int invoiceItemId)
    {
        modalInvItemEdit.item = await _invItemService.GetInvoiceItemByIdAsync(invoiceItemId);
        modalInvItemEdit.isVisible = true;
        modalInvItemEdit.wasEdited = false;
        StateHasChanged();
       
    }
    private async void CloseEditInvoiceItem()
    {
        if (modalInvItemEdit.wasEdited)
        {
            modalInvItemEdit.isVisible = false;
            modalModelMessage.Body = "The invoice item has been updated";
            modalModelMessage.Title = "Success";
            modalModelMessage.Type = ModalType.Success;
            modalModelMessage.isVisible = true;
            StateHasChanged();
            await OnInitializedAsync();

        }
        else
        {
            modalInvItemEdit.isVisible = false;
            StateHasChanged();
        }
    }
    private async void DeleteInvoiceItem(int invoiceItemId)
    {
        var invoiceItemToDelete = await _invItemService.GetInvoiceItemByIdAsync(invoiceItemId);
        modalModelMessage.Type = ModalType.Danger;
        modalModelMessage.Title = "Warrning";
        modalModelMessage.Body = $"Do you realy want delete {invoiceItemToDelete.Item.Name} ???";
        modalModelMessage.isVisible = true;
        modalModelMessage.idToDelte = invoiceItemId;
        StateHasChanged();

    }
    private async void DeleteInvoiceItemConfirmed()
    {
        if (modalModelMessage.idToDelte == null || modalModelMessage.idToDelte == 0)
        {
            modalModelMessage.Type = ModalType.Error;
            modalModelMessage.Title = "Something went wrong";
            modalModelMessage.Body = "The item has not been deleted from the invoice";
            modalModelMessage.isVisible = true;
            StateHasChanged();

        }
        else
        {
            await _invItemService.DeleteInvoiceItemByIdAsync((int)modalModelMessage.idToDelte);
            modalModelMessage.idToDelte = null;
            modalModelMessage.Type = ModalType.Success;
            modalModelMessage.Title = "Success";
            modalModelMessage.Body = "The item has been successfully deleted from the invoice";
            modalModelMessage.isVisible = true;
            invoice = await _invoiceService.GetInvoiceByIdAsync((int)invoiceId);
            StateHasChanged();
        }

    }
    private void showItemsModal()
    {
        isVisibleItemsModal = true;
    }
    private void CloseItemsModal()
    {
        isVisibleItemsModal = false;
    }
    private async void onCancel(MouseEventArgs e)
    {
        modalModelMessage = new();
        StateHasChanged();

    }

}
