@page "/buyers"
@inject IBuyerService BuyerService
@inject IAppUserService UserService
@inject INumberGenerator _numberGenerator
@inject IInvoiceService InvoiceService
@inject NavigationManager NavigationManager
<h3>Buyers</h3>
@if (_buyers is null)
{
    <p>
        Loading ...
    </p>
}
else if (_buyers.Count() == 0)
{
    <p>Looks like there's nothing here</p>
}
else
{

    <QuickGrid Items="_buyers.AsQueryable()">
        <PropertyColumn Property="@(b=>b.Nip)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(b=>b.Name)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(b=>b.Address.City)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(b=>b.Address.Street)" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="@(b=>b.IsActive)" Sortable="true"></PropertyColumn>
        <TemplateColumn Title="Action">
            <button class="btn btn-primary" @onclick="()=>CreateInvoice(context.Id)">Create Invoice</button>
            <button class="btn btn-dark">History</button>
        </TemplateColumn>
    </QuickGrid>

}
<a class="btn btn-primary" href="newbuyer">Add New</a>

@code {
    List<Buyer> _buyers = new();
    protected override async Task OnInitializedAsync()
    {
        _buyers = await BuyerService.GetUserBuyersAsync();
    }
    private async Task CreateInvoice(int buyerId)
    {
        var user = await UserService.GetCurrentUser();
        var number = await _numberGenerator.GenerateInvoiceNumber(DateTime.Now);
        Invoice _invoice = new()
            {
                BuyerId = buyerId,
                SellerId = user.Seller.Id,
                AppUserId = user.Id,
                SellerAddressId = user.Seller.AddressId,
                Number = number,
                DaysOfPaiment = 0

            };
        await InvoiceService.AddInvoiceAsync(_invoice);
        NavigationManager.NavigateTo($"/invoiceaction/{_invoice.Id}");
    }

}
