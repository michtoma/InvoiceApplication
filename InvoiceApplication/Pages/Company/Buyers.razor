@page "/buyers"
@inject IBuyerService _buyerService
@inject IAppUserService _userService
@inject INumberGenerator _numberGenerator
@inject IInvoiceService _invoiceService
@inject NavigationManager _navigationManager
<h3>Buyers</h3>
<BuyerDetails @ref="_detailsSetings" OnClickClose="Close"></BuyerDetails>
@if (buyers is null)
{
    <p>Looks like there's nothing here</p>
}
else if (buyers.Count() == 0)
{
    <p>Loading ...</p>
}
else
{
    <div class="table-responsive">
        <QuickGrid Items="filteredBuyers" Class="table table-secondary table-striped table-bordered">
            <PropertyColumn Property="@(b=>b.Nip)" Sortable="true">
                <ColumnOptions>
                    <span class="oi oi-magnifying-glass"></span>
                    <input type="search" class="oi-browser" autofocus @bind="nipFilter" @bind:event="oninput" placeholder="Serch" />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(b=>b.Name)" Sortable="true">
                <ColumnOptions>
                    <span class="oi oi-magnifying-glass"></span>
                    <input type="search" class="oi-browser" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Serch" />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(b=>b.Address.City)" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(b=>b.Address.Street)" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="@(b=>b.IsActive)" Sortable="true"></PropertyColumn>
            <TemplateColumn Title="Action">
                <button class="btn btn-primary" @onclick="()=>CreateInvoice(context.Id)">Create Invoice</button>
                <button class="btn btn-dark" @onclick="()=>ShowDetails(context.Id)">Details</button>
            </TemplateColumn>
            <a class="btn btn-outline-secondary" href="newbuyer">Add New</a>
        </QuickGrid>
    </div>
}

@code {
    string nameFilter;
    string nipFilter;
    bool detailVisible = false;
    BuyerDetails? _detailsSetings;
    List<Buyer> buyers = new();
    IQueryable<Buyer> filteredBuyers
    {
        get
        {
            var result = buyers.AsQueryable();
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(i => i.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase)).AsQueryable();
            }
            if (!string.IsNullOrEmpty(nipFilter))
            {
                result = result.Where(i => i.Nip.Contains(nipFilter, StringComparison.CurrentCultureIgnoreCase)).AsQueryable();
            }
            return result.AsQueryable();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        buyers = await _buyerService.GetUserBuyersAsync();
    }
    private async Task CreateInvoice(int buyerId)
    {
        var user = await _userService.GetCurrentUser();
        var number = await _numberGenerator.GenerateInvoiceNumber(DateTime.Now);
        Invoice _invoice = new()
            {
                BuyerId = buyerId,
                SellerId = user.Seller.Id,
                AppUserId = user.Id,
                SellerAddressId = user.Seller.AddressId,
                Number = number,
                DaysOfPaiment = 0

            };
        await _invoiceService.AddInvoiceAsync(_invoice);
        _navigationManager.NavigateTo($"/invoiceaction/{_invoice.Id}");
    }
    private async Task ShowDetails(int buyerId)
    {
        _detailsSetings.buyer = buyers.FirstOrDefault(b => b.Id == buyerId);
        detailVisible = !detailVisible;
        _detailsSetings.IsVisible = detailVisible;
        StateHasChanged();
    }
    public void Close()
    {
        detailVisible = !detailVisible;
    }
}
