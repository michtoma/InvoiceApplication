@page "/Items"
@inject IItemService service
@inject IVatRateService vatService

<PageTitle>Items</PageTitle>
<div class="container-fluid">
    <h3>Items</h3>
    <button class="btn btn-outline-success mb-2" @onclick="addNew">Dodaj Nowy</button>
    <br />
    <div class="row">
        @if (addNewVisisble)
        {
            <ItemsOperations itemId="itemId" isVisible="addNewVisisble" OnClickClose="ClickHandler"></ItemsOperations>
        }
        @if (items is null)
        {
            <p>        Loading ....    </p>
        }
        else if (items.Count()==0)
        {
            <p>Look like is nothing to show</p>
        }
        else
        {

            <div>
                <QuickGrid Items="items.AsQueryable()" Class="table table-striped table-bordered">
                    <PropertyColumn Property="@(i => i.Name)" Sortable="true" />
                    <PropertyColumn Property="@(i=>i.Ean)" Sortable="true" />
                    <PropertyColumn Property="@(i=>i.NetPrice)" Format="0.00 zł" Sortable="true" Title="Nett Price" />
                    <PropertyColumn Property="@(i=>i.VatRate.Rate + " %")" Sortable="true" Title="Vat Rate" />
                    <PropertyColumn Property="@(i=>i.GrossPrice)" Format="0.00 zł" Sortable="true" Title="Gross Price" />
                    <PropertyColumn Property="@(i=>i.Quantity)" Sortable="true" Title="Quantity" />
                    <PropertyColumn Property="@(i=>i.UnitOfMeasure.ShortName)" Sortable="true" Title="Unit" />
                    <TemplateColumn Title="Actions">
                        <button class="btn btn-secondary" @onclick="(e => Edit(context.Id))">Edit</button>
                        <button class="btn btn-danger" @onclick="(e => Delete(context.Id))">Delete</button>
                    </TemplateColumn>

                </QuickGrid>

            </div>
        }
    </div>
</div>


@code {
    private bool addNewVisisble = false;
    int itemId;
    Item item = new Item();
    List<Item> items = new List<Item>();
    protected override async Task OnInitializedAsync()
    {
        items = await service.GetUSerItemsAsync();
        item = new Item();
    }
    private void addNew()
    {
        itemId = 0;
        item = new Item();
        addNewVisisble = true;

    }
    private async void Edit(int Id)
    {
        item = await service.GetItemByIdAsync(Id);
        itemId = Id;
        if (item.Id == Id)
        {
            addNewVisisble = true;
        }
    }
    private async void Delete(int id)
    {
        item = await service.GetItemByIdAsync(id);
        if (item.Id == id)
        {
            await service.DeleteItemAsync(item);
            await OnInitializedAsync();
            StateHasChanged();
        }
    }
    private async void ClickHandler()
    {
        addNewVisisble = false;
        items = await service.GetUSerItemsAsync();
        StateHasChanged();
    }
}
