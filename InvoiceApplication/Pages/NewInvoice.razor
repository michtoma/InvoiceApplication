@page "/newInvoice"
@inject IInvoiceService _invoiceService
@inject IItemService _itemService
<PageTitle>Add New Invoice</PageTitle>
<ModalWindow modalMessage="modalModel" onCancel="onCancel" onConfirm="onConfirm"></ModalWindow>
<h3>Add New Invoice</h3>
<EditForm Model="invoice" OnValidSubmit="HeaderConirmation">
    <DataAnnotationsValidator />
    <div>
        <label for="number">Number</label>
        <InputText id="number" @bind-Value="invoice.Number" class="form-control"></InputText>
        <ValidationMessage For="@(() => invoice.Number)" />
    </div>
    <div>
        <label for="createDate">Create Date</label>
        <InputDate id="createDate" @bind-Value="invoice.CreateDate" class="form-control"></InputDate>
        <ValidationMessage For=@(()=>invoice.CreateDate) />
    </div>
    <div>
        <label for="issueDate">Create Date</label>
        <InputDate id="createDate" @bind-Value="invoice.DateOfIssue" class="form-control"></InputDate>
        <ValidationMessage For=@(()=>invoice.DateOfIssue) />
    </div>
    <div>
        <label for="days">Payment term</label>
        <InputNumber id="days" @bind-Value="invoice.DaysOfPaiment" class="form-control"></InputNumber>
        <ValidationMessage For=@(()=>invoice.DaysOfPaiment) />
    </div>
    <div>
        <label>Payment deadline: @DateOnly.FromDateTime(invoice.PaymentDate)</label>
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="invoice.Description" class="form-control"></InputText>
        <ValidationMessage For=@(()=>invoice.Description) />
    </div>
    @if (!modalConfirmed)
    {
        <button class="btn btn-success my-2" type="submit">Confirm</button> 
    }
</EditForm>
@if (modalConfirmed)
{
    <p>
        logika uzupełniania pozycji faktury
    </p>
}
<a class="btn btn-secondary my-2" href=" Invoices">Back to Invoice List </a>


@code {
    bool modalConfirmed = false;
    ModalMessage modalModel = new();

    Invoice invoice = new();
    List<Item> items = new();
    protected override async Task OnInitializedAsync()
    {
        items = await _itemService.GetAllItemsAsync();
    }
    void HeaderConirmation()
    {
        modalModel.Body = "Czy napewno chcesc dodać fakturę o numerze " + invoice.Number;
        modalModel.Title="Potwierdź:";
        modalModel.Type = ModalType.Confirm;
        modalModel.isVisible = true;

    }
    private async void onConfirm(MouseEventArgs e)
    {
        modalConfirmed = true;
        modalModel = new();
        await _invoiceService.AddInvoiceAsync(invoice);
        modalModel.Type = ModalType.Success;
        modalModel.Title = "Powodzenie";
        modalModel.Body = "Prawidłowo dodano";
        modalModel.isVisible = true;
        StateHasChanged();


    }
    private async void onCancel(MouseEventArgs e)
    {
        modalModel = new();
        StateHasChanged();

    }

}
