@inject IItemService itemService
@inject IVatRateService vatService
@inject IUnitOfMeasureService measurService
@if (isVisible)
{

    <h3>Items Operations</h3>
    <EditForm Model="item" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <div>
            <label for="id">Id</label>
            <InputNumber id="id" @bind-Value="item.Id" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => item.Id)" />
        </div>
        <div>
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="item.Name" class="form-control"></InputText>
            <ValidationMessage For="@(() => item.Name)" />
        </div>
        <div>
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="item.Description" class="form-control"></InputText>
            <ValidationMessage For="@(() => item.Description)" />
        </div>
        <div>
            <label for="ean">Ean</label>
            <InputText id="ean" @bind-Value="item.Ean" class="form-control"></InputText>
            <ValidationMessage For="@(() => item.Ean)" />
        </div>
        <div>
            <label for="comments">Comments</label>
            <InputText id="comments" @bind-Value="item.Comments" class="form-control"></InputText>
            <ValidationMessage For="@(() => item.Comments)" />
        </div>
        <div>
            <label for="vatRate">VatRate</label>
            <InputSelect id="vatRate" @bind-Value="item.VatRateID" class="form-control">
                @foreach (var vatRate in vatRates)
                {
                    <option value="@vatRate.Id">@vatRate.Rate</option>
                }
            </InputSelect>
        </div>
        <div>
            <label for="unitOfMeasure">VatRate</label>
            <InputSelect id="unitOfMeasure" @bind-Value="item.UnitOfMeasureId" class="form-control">
                @foreach (var unitOfMeasure in unitOfMeasures)
                {
                    <option value="@unitOfMeasure.Id">@unitOfMeasure.Name</option>
                }
            </InputSelect>
        </div>

        <div>
            <label for="netPrice">NetPrice</label>
            <InputNumber id="netPrice" @bind-Value="item.NetPrice" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => item.NetPrice)" />
        </div>
        <div>
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="item.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => item.Quantity)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">@(isNew ? "Create Item" : "Update Item")</button>

        <button class="btn btn-dark" @onclick="Close">Close</button>
    </EditForm>
}

@code {
    List<UnitOfMeasure> unitOfMeasures = new List<UnitOfMeasure>();
    List<VatRate> vatRates = new List<VatRate>();
    [Parameter] 
    public EventCallback OnClick { get; set; }
    [Parameter]
    public int? itemId { get; set; }
    [Parameter]
    public bool isVisible { get; set; }
    Item item = new Item();
    bool isNew = true;
    protected override async Task OnParametersSetAsync()
    {
        vatRates = await vatService.GetVatRatesAsync();
        unitOfMeasures = await measurService.GetAllMeasureAsync();
        if (itemId != 0)
        {
            item = await itemService.GetItemByIdAsync((int)itemId);
            isNew = false;
        }
        else
        {
            item = new Item();
            isNew = true;
        }

    }

    private async void SubmitForm()
    {
        if (isNew)
        {
            await itemService.AddNewItemAsync(item);
            Close();
        }
        else
        {
            await itemService.UpdateItemAsync(item);
            Close();
        }
    }
    async void Close()
    {
        isVisible = false;
        await OnClick.InvokeAsync();

    }

}
